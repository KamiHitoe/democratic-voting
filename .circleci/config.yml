version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-ecs: circleci/aws-ecs@2.2.1
  aws-cli: circleci/aws-cli@2.0.6

jobs:
  test-frontend:
    docker:
      - image: cimg/node:17.3.0
        environment:
          NODE_ENV: test
    working_directory: ~/cicd

    steps:
      - checkout
      # save cache and install package via npm
      - restore_cache:
          keys:
            - v1-deps-{{ checksum "~/cicd/frontend/package.json" }}
      - run:
          name: install-packages
          command: yarn install
          working_directory: ~/cicd/frontend
      - save_cache:
          paths:
            - node_modules
          key: v1-deps-{{ checksum "~/cicd/frontend/package.json" }}

      # - run:
      #     name: run-test-frontend-by-JEST
      #     command: yarn test
      #     working_directory: ~/cicd/frontend

      # - run:
      #     name: run-lint-frontend-by-ESLint
      #     command: yarn lint
      #     working_directory: ~/cicd/frontend

  test-backend:
    docker:
      # backend container
      - image: cimg/ruby:2.7.5
        auth:
          username: user
          password: foobar
        environment:
          RAILS_ENV: test
          POSTGRES_HOST: localhost
          POSTGRES_USER: postgres
      # db container
      - image: cimg/postgres:12.9
        auth:
          username: user
          password: foobar
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: democratic_voting_test
    working_directory: ~/cicd
    steps:
      - checkout
      - restore_cache:
          keys:
            - gem-cache-v1-{{ checksum "~/cicd/backend/Gemfile.lock" }}
            - gem-cache-v1-
      - run:
          name: install bundler and bundle install
          command: |
            gem install bundler
            bundle install
          working_directory: ~/cicd/backend
      - save_cache:
          paths:
            - ~/cicd/backend/vendor/bundle
          key: gem-cache-v1-{{ checksum "~/cicd/backend/Gemfile.lock" }}

      # setup db
      - run:
          name: create db and table
          command: |
            bundle exec rails db:create
            bundle exec db:schema:load --trace
            bundle exec rails db:migrate
          working_directory: ~/cicd/backend
          environment:
            DATABASE_URL: "postgres://postgres@localhost:5432/democratic_voting_test"


      # run test
      - run:
          name: run RSpec
          command: bundle exec rspec
          working_directory: ~/cicd/backend

      # store artifacts
      - store_artifacts:
          path: /tmp/test-results

  build-and-push-image-frontend:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # repo: "democratic-frontend"
          repo: "test-frontend"
          region: AWS_DEFAULT_REGION
          tag: "${CIRCLE_SHA1}" # CircliCI default env var
          path: "./frontend"
          dockerfile: Dockerfile

  build-and-push-image-backend:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          # repo: "democratic-backend"
          repo: "test-backend"
          region: AWS_DEFAULT_REGION
          tag: "${CIRCLE_SHA1}" # CircliCI default env var
          path: "./backend"
          dockerfile: Dockerfile


workflows:
  version: 2
  test:
    jobs:
      - test-frontend:
          filters:
            branches:
              only: master
      - test-backend:
          filters:
            branches:
              only: master

      # # push frontend-docker-image to ECR
      - build-and-push-image-frontend:
          requires:
            - test-frontend
          filters:
            branches:
              only: master
      - build-and-push-image-backend:
          requires:
            - test-backend
          filters:
            branches:
              only: master

      # # deploy frontend image to ECS Fargate
      - aws-ecs/deploy-service-update:
          # task-definition family name
          family: td-frontend
          cluster-name: test-cluster
          service-name: democratic-frontend-service
          container-image-name-updates: "container=frontend-container,tag=${CIRCLE_SHA1}"
          requires:
            - build-and-push-image-frontend
          filters:
            branches:
              only: master
      - aws-ecs/deploy-service-update:
          # task-definition family name
          family: td-backend
          cluster-name: test-cluster
          service-name: democratic-backend-service
          container-image-name-updates: "container=backend-container,tag=${CIRCLE_SHA1}"
          requires:
            - build-and-push-image-backend
          filters:
            branches:
              only: master

